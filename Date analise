# Открытие файла

if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")

# Осмотр данных

head(restData,n=3)
tail(restData,n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm=TRUE)
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))  Карта вероятностей
table(restData$zipCode,useNA="ifany")         создание сводной таблицы
table(restData$councilDistrict,restData$zipCode)      создание двухмерной таблицы

sum(is.na(restData$councilDistrict))     проверка на NA
any(is.na(restData$councilDistrict)) 
all(restData$zipCode > 0)

colSums(is.na(restData))  вычисление суммы по строкам (rowSums) и столбцам - вычисляет в каком столбце сколько NA
all(colSums(is.na(restData))==0) подтверждает, что сумма NA для каждого столбца = 0

table(restData$zipCode %in% c("21212")) поиск ресторанов с индексом 21212
table(restData$zipCode %in% c("21212","21213"))   поиск ресторанов с индексом 21212 и 21213
restData[restData$zipCode %in% c("21212","21213"),]   получение списка этих ресторанов

Еще пример анализа:
data(UCBAdmissions)    предустановленная база приема студентов в Ун-т Беркли
DF = as.data.frame(UCBAdmissions)
summary(DF)

xt <- xtabs(Freq ~ Gender + Admit,data=DF)   создание сводной (перекрестной) таблицы

warpbreaks$replicate <- rep(1:9, len = 54) еще одна пред уст база
xt = xtabs(breaks ~.,data=warpbreaks)   создание перекрестной таблицы по всем переменным

ftable(xt)    создание плоской таблицы вместо нескольких двухмерных (как предыдущая только компактнее)

print(object.size(fakeData),units="Mb")   показывает размер данных в Мб


# Создание последовательностей
s1 <- seq(1,10,by=2) ; s1 - создает переменную с последовательностью от 1 до 10 с шагом 2
s2 <- seq(1,10,length=3); s2 создает переменную с последовательностью от 1 до 10 из 3-х цифр
x <- c(1,3,8,25,100); seq(along = x)   создает переменную той же длинны, что и Х, но с последов нумерацией - исп для индекса

restData$nearMe = restData$neighborhood %in% c("Roland Park", "Homeland") созданеи выборки
table(restData$nearMe)

restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE) создание логической переменной, показывающей, что есть данные не удовлетворяющие условию
table(restData$zipWrong,restData$zipCode < 0)

restData$zipGroups = cut(restData$zipCode,breaks=quantile(restData$zipCode))  разбиение переменной (столбца) на группы
table(restData$zipGroups)
table(restData$zipGroups,restData$zipCode)

library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)  тоже самое с использованием доп библиотеки
table(restData$zipGroups)

restData$zcf <- factor(restData$zipCode) создание факторной переменной из другой (числовой)
restData$zcf[1:10]

yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesnofac = factor(yesno,levels=c("yes","no"))   преобразование переменной в факторную и числовую
relevel(yesnofac,ref="yes")
as.numeric(yesnofac)

library(Hmisc); library(plyr)
restData2 = mutate(restData,zipGroups=cut2(zipCode,g=4))  еще способ создания переменной
table(restData2$zipGroups)

# Вспомогательные функции
abs(x) absolute value
sqrt(x) square root
ceiling(x) ceiling(3.475) is 4
floor(x) floor(3.475) is 3
round(x,digits=n) roun(3.475,digits=2) is 3.48
signif(x,digits=n) signif(3.475,digits=2) is 3.5
cos(x), sin(x) etc.
log(x) natural logarithm
log2(x), log10(x) other common logs
exp(x) exponentiating x

# Пример подготовки данных

library(reshape2)
head(mtcars)

mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))  обрезка массива с указанием главных переменных и измеряемых переменных
head(carMelt,n=3)
tail(carMelt,n=3)

cylData <- dcast(carMelt, cyl ~ variable)  разбивка переменной cyl по всем остальным (обобщает данные)
cylData

cylData <- dcast(carMelt, cyl ~ variable,mean)   то же с вычислением средних

tapply(InsectSprays$count,InsectSprays$spray,sum) обобщение по факторам (1 среднее расчитывается по 1 фактору)

spIns =  split(InsectSprays$count,InsectSprays$spray)  то же с разделением данных через split с выдачей списка значений
sprCount = lapply(spIns,sum)
unlist(sprCount)
или sapply(spIns,sum) вместо 2-х предыд шагов

ddply(InsectSprays,.(spray),summarize,sum=sum(count))  то же

spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))   вариант использвоания функции для создания нов переменной
dim(spraySums)

# Сведение таблиц

if(!file.exists("./data")){dir.create("./data")}
fileUrl1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 = "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv")
download.file(fileUrl2,destfile="./data/solutions.csv")
reviews = read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews,2)

mergedData = merge(reviews,solutions,by.x="solution_id",by.y="id",all=TRUE)  сведение таблиц 1 и 2 по sol id и id 
head(mergedData)


# Работа с текстом

tolower(names(cameraData))  преобразует слова в слова с нижним регистром в названии переменных 

splitNames = strsplit(names(cameraData),"\\.")   удаляет точки из названия переменных

splitNames[[6]][1]   оставляет только 1 часть в переменной 
firstElement <- function(x){x[1]}
sapply(splitNames,firstElement)

sub("_","",names(reviews),)  удаляет _ из названий переменных

gsub("_","",testName) заменяет все _ в слове на пустое место

grep("Alameda",cameraData$intersection)  ищет в каких строках встречается слово

table(grepl("Alameda",cameraData$intersection))  выдает к-во, когда встречается слово

cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection),]  выделение подмассива по ключевому слову

grep("Alameda",cameraData$intersection,value=TRUE)  показывает содержимое ячеек, где встречается слово

# Регулярные выражения
^ - обозначает начало строки
$ - конец строки
[Bb][Uu][Ss][Hh]  поиск слова из букв любого регистра
[0-9][a-zA-Z] - поиск диапазона
[^?.]$ - поиск любых строк кроме содержащих
. - зменяет любой символ
flood|fire - или
[Gg]eorge( [Ww]\.)? [Bb]ush   - ? знак указывает на необязательность условия
(.*) - ищем что-то заключенное в скобки
